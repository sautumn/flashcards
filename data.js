module.exports = [
  {
    num: 1,
    question: 'Whats an angular directive and why should you implement one?',
    answer: 'Angular directives are JavaScript functions that manipulate and add behaviors to HTML DOM elements. A main advantage of the directive, in addition to being intuitive-looking as its declarative aspect resides inline in your markup, is that it is a reusable component.',
    sourcetitle: 'Angular directives quick overview · tim-hr/stuff Wiki',
    sourceurl: 'https://github.com/tim-hr/stuff/wiki/Angular-directives-quick-overview',
    tag: 'Angular',
  },
  {
    num: 2,
    question: 'What are the major differences between React and Angular?',
    answer: 'Angular is full MVC framework that uses DOM directives, factories, and filters. More powerful than React due to its full MVC archictecture, but suffers a performance hit.<br><br>React is faster, newer, uses the virtual DOM and JSX. Very lightweight but you have to provide your own controller and model. Redux can be used as the model and regular JS as the controller.',
    sourcetitle: 'Basic-Differences-Between-AngularJS-and-React-484781-2.jpg (2000×2829)',
    sourceurl: 'http://i1-news.softpedia-static.com/images/news2/Basic-Differences-Between-AngularJS-and-React-484781-2.jpg',
    tag: 'Frameworks',
  },
  {
    num: 3,
    question: 'What is Webpack? What is Babel?',
    answer: 'Webpack is a module bundler which takes modules with dependencies and generates static assets by bundling them together based on some configuration.<br><br> Babel translates ES6 and JSX into a format that is supported by the browser.<br><br>Webpack uses loaders to translate files and often times Webpack will be used inconjunction with Babel to translate files for use in the browser.',
    sourcetitle: 'Setting Up a React.js Environment Using Npm, Babel 6 and Webpack | Codementor',
    sourceurl: 'https://www.codementor.io/tamizhvendan/beginner-guide-setup-reactjs-environment-npm-babel-6-webpack-du107r9zr',
    tag: 'React',
  },
  {
    num: 4,
    question: 'What does <!doctype html> do?',
    answer: 'DOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a different rendering mode that is incompatible with some specifications. Including the DOCTYPE in a document ensures that the browser makes a best-effort attempt at following the relevant specifications.',
    sourcetitle: 'What does <!doctype html> do? - stackoverflow',
    sourceurl: 'http://stackoverflow.com/questions/7695044/what-does-doctype-html-do',
    tag: 'HTML',
  },
  {
    num: 5,
    question: 'What\'s the difference between HTML and XHTML?',
    answer: 'HTML5 has two parsing modes or syntaxes: HTML and XML. The difference depends on whether the document is served with a Content-type: text/html header or a Content-type: application/xml+xhtml header.<br><br>xHTML is the XML version of HTML. Stricter than HTML. Elements and attributes must be in lower case, end tags are required for all elements, attribute values must always be quoted, among other rules.',
    sourcetitle: 'XHTML vs HTML',
    sourceurl: 'http://www.tutorialspoint.com/xhtml/xhtml_vs_html.htm',
    tag: 'HTML',
  },
  {
    num: 6,
    question: 'What is progressive enhancement?',
    answer: 'Starting with a baseline of usable functionality, then increasing the richness of the user experience step by step by testing for support for enhancements before applying them.',
    sourcetitle: 'Graceful degradation versus progressive enhancement - W3C Wiki',
    sourceurl: 'https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement',
    tag: 'General',
  },
  {
    num: 7,
    question: 'What is graceful degradation?',
    answer: 'The practice of building your web functionality so that it provides a certain level of user experience in more modern browsers, but it will also degrade gracefully to a lower level of user in experience in older browsers. This lower level is not as nice to use for your site visitors, but it does still provide them with the basic functionality that they came to your site to use; things do not break for them.',
    sourcetitle: 'What is "Graceful Degradation" in Web Design?',
    sourceurl: 'http://webdesign.about.com/od/webdesignglossary/g/graceful-degradation.htm',
    tag: 'General',
  },
  {
    num: 8,
    question: 'What is BEM?',
    answer: 'The Block, Element, Modifier methodology (commonly referred to as BEM) is a popular naming convention for classes in HTML and CSS. Developed by the team at Yandex, its goal is to help developers better understand the relationship between the HTML and CSS in a given project.',
    sourcetitle: 'BEM 101',
    sourceurl: 'https://css-tricks.com/bem-101/',
    tag: 'CSS',
  },
  {
    num: 9,
    question: 'What does CORS stand for and what issue does it address?',
    answer: 'Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts, JavaScript, etc.) on a web page to be requested from another domain outside the domain from which the resource originated. <br><br>CORS defines a way in which a browser and server can interact to safely determine whether or not to allow the cross-origin request. It allows for more freedom and functionality than purely same-origin requests, but is more secure than simply allowing all cross-origin requests. It is a recommended standard of the W3C.',
    sourcetitle: 'Cross-origin resource sharing - Wikipedia',
    sourceurl: 'https://en.m.wikipedia.org/wiki/Cross-origin_resource_sharing',
    tag: 'General',
  },
  {
    num: 10,
    question: 'What\'s the difference between full standards mode, almost standards mode and quirks mode?',
    answer: 'They are modes used by browser rendering engines. In the standards mode, the engine will render a page as HTML and CSS specifications specify. The quirks mode is to render legacy pages written before these standards are fixed. The legacy pages contain non-standard behaviours emulated in old browsers such as Internet Explorer 5 or Navigator 4.',
    sourcetitle: 'Quirks mode - Wikipedia',
    sourceurl: 'https://en.wikipedia.org/wiki/Quirks_mode',
    tag: 'HTML',
  },
  {
    num: 11,
    question: 'What is progressive rendering?',
    answer: '',
    sourcetitle: 'Progressive Image Rendering',
    sourceurl: 'https://blog.codinghorror.com/progressive-image-rendering/',
    tag: 'General',
  },
  {
    num: 12,
    question: 'What is a closure?',
    answer: 'Closures are functions that refer to independent (free) variables (variables that are used locally, but defined in an enclosing scope). In other words, these functions "remember" the environment in which they were created. Allows use to emulate private methods which aren\'t avaliable in JavaScript.',
    sourcetitle: 'Closures - JavaScript | MDN',
    sourceurl: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures',
    tag: 'JavaScript',
  },
  {
    num: 13,
    question: 'What\'s a typical use case for anonymous functions?',
    answer: 'The most typical use for anonymous functions in JS is to pass them as arguments to other functions (setTimeout, or as callbacks). You can also use them to create closures (IIFE\'s). ',
    sourcetitle: 'What\'s a typical use case for anonymous functions in JavaScript? - Quora',
    sourceurl: 'https://www.quora.com/Whats-a-typical-use-case-for-anonymous-functions-in-JavaScript',
    tag: 'JavaScript',
  },
  {
    num: 14,
    question: 'When would you use document.write()?',
    answer: 'Probably never. Using document.write will overwrite all the HTML on a page. The only seem appropriate usage for document.write() is when working third parties like Google Analytics and such for including their scripts. This is because document.write() is mostly available in any browser. Since third party companies have no control over the user’s browser dependencies (ex. jQuery), document.write() can be used as a fallback or a default method.',
    sourcetitle: 'JS Interview Question: When would you use document.write()? – Medium',
    sourceurl: 'https://medium.com/@rlynjb/js-interview-question-when-would-you-use-document-write-ccc199137715#.hkym7abs2',
    tag: 'JavaScript',
  },
  {
    num: 15,
    question: 'What\'s the difference between a variable that is: null, undefined or undeclared?',
    answer: 'In JavaScript, undefined means a variable has been declared but has not yet been assigned a value. Null is an assignment value. It can be assigned to a variable as a representation of no value. A variable is undeclared when it does not use the var/let/const keyword. It gets created on the global object (that is, the window), thus it operates in a different space as the declared variables.',
    sourcetitle: 'Lucy | JS: null, undefined, and undeclared',
    sourceurl: 'http://lucybain.com/blog/2014/null-undefined-undeclared/',
    tag: 'JavaScript',
  },
  {
    num: 16,
    question: 'What is progressive rendering?',
    answer: '',
    sourcetitle: 'Progressive Image Rendering',
    sourceurl: 'https://blog.codinghorror.com/progressive-image-rendering/',
    tag: 'General',
  },
  {
    num: 17,
    question: 'What is event delegation?',
    answer: 'Event delegation allows you to avoid adding event listeners to specific nodes;  instead, the event listener is added to one parent.  That event listener analyzes bubbled events to find a match on child elements.',
    sourcetitle: 'Event Delegation',
    sourceurl: 'https://davidwalsh.name/event-delegate',
    tag: 'JavaScript',
  },
  {
    num: 18,
    question: 'What is \'this\' in JavaScript?',
    answer: 'In the global execution context (outside of any function), this refers to the global object, whether in strict mode or not.<br>Inside a function, the value of this depends on how the function is called. If the code is not in strict mode and the value of this is not set by the call, this will default to the global object. In strict mode, however, the value of this remains at whatever it was set to when entering the execution context.<br>Arrow functions use the outer scope this value.<br>When a function is called as a method of an object, its this is set to the object the method is called on.',
    sourcetitle: 'this - JavaScript | MDN',
    sourceurl: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this',
    tag: 'JavaScript',
  },
  {
    num: 19,
    question: 'What is prototypal inheritance?',
    answer: 'In JavaScript, all functions are also objects, which means that they can have properties. And as it so happens, they all have a property called `prototype`, which is also an object. Any time you create a function, it will automatically have a property called prototype, which will be initialized to an empty object. JavaScript uses an inheritance model called “differential inheritance”. What that means is that methods aren’t copied from parent to child. Instead, children have an “invisible link” back to their parent object. You can use Object.create or the new keyword to create new objects from constructors that will automatically inherit the prototypal methods that were set on their parent. Because JavaScript will look up the prototype when trying to access properties on an object, you can alter your classes at runtime.',
    sourcetitle: 'Prototypal Inheritance in JavaScript – Medium',
    sourceurl: 'https://medium.com/@kevincennis/prototypal-inheritance-781bccc97edb#.iub53yww9',
    tag: 'JavaScript',
  },
  {
    num: 20,
    question: 'What do you think of AMD vs CommonJS?',
    answer: 'In general, AMD is preferred where async loading is common (i.e. the browser). Server-side, CommonJS/Node.js style "require" is the norm. ',
    sourcetitle: 'JavaScript Module Systems Showdown: CommonJS vs AMD vs ES2015',
    sourceurl: 'https://auth0.com/blog/javascript-module-systems-showdown/',
    tag: 'JavaScript',
  },
  {
    num: 21,
    question: 'Explain why the following doesn\'t work as an IIFE: function foo(){ }();.',
    answer: 'Because foo isn’t being called. This is a function definition, it defines foo. But it’s not a function expression - that is, it’s not understood by the JS parser to actually call a function. In order to prep the parser that we\'re actually dealing with a function expression we have to wrap things up in ().',
    sourcetitle: 'Lucy | JS Immediately Invoked Function Expressions',
    sourceurl: 'http://lucybain.com/blog/2014/immediately-invoked-function-expression/',
    tag: 'JavaScript',
  },
  {
    num: 22,
    question: 'What\'s the difference between host objects and native objects?',
    answer: 'Native objects have an internal [[Class]] property of one of the following: "Arguments", "Array", "Boolean", "Date", "Error", "Function", "JSON", "Math", "Number", "Object", "RegExp", and "String".<br>A host object is an object provided by the environment in order to serve a specific purpose to that environment not defined in by the specification. Host objects (assuming browser environment): window, document, location, history, XMLHttpRequest, setTimeout, getElementsByTagName, querySelectorAll.',
    sourcetitle: 'javascript - What is the difference between native objects and host objects? - Stack Overflow',
    sourceurl: 'http://stackoverflow.com/questions/7614317/what-is-the-difference-between-native-objects-and-host-objects',
    tag: 'JavaScript',
  },
  {
    num: 23,
    question: 'Difference between: function Person(){}, var person = Person(), and var person = new Person()?',
    answer: '1. function Person() {} <br>Declares a function (but does not execute it).It will usually have some code between the curly brackets.<br>2. var person = Person()<br>Declares a variable (person), invokes a function (Person) and sets the value of person to the return of the function.<br>3. var person = new Person()<br>Creates a new instance of an object based on the Person function. So the variable (person) is now an Object, not just a string or a number.',
    sourcetitle: 'In Javascript, what is the difference between: function Person() {} var person = Person() var person = new Person()? - Quora',
    sourceurl: 'https://www.quora.com/In-Javascript-what-is-the-difference-between-function-Person-var-person-Person-var-person-new-Person',
    tag: 'JavaScript',
  },
  {
    num: 24,
    question: 'Explain Function.prototype.bind...',
    answer: 'The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.',
    sourcetitle: 'Function.prototype.bind() - JavaScript | MDN',
    sourceurl: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind',
    tag: 'JavaScript',
  },
  {
    num: 25,
    question: 'What\'s the difference between feature detection, feature inference, and using the UA string?',
    answer: 'When you check if a certain feature exists, that’s feature detection. Feature inference is when you make an assumption that because one feature is present (or not) another one will also be present (or not). “UA” stands for user agent, which means what browser you are on.<br>Use feature detection if you\'re working with a feature that isn’t available across all browsers. When the browsers upgrade your code will be able to take advantage of the upgrade and your code will still work.',
    sourcetitle: 'Lucy | JS: feature detection vs. inference vs. UA string',
    sourceurl: 'http://lucybain.com/blog/2014/feature-detection-vs-inference/',
    tag: 'JavaScript',
  },
  {
    num: 26,
    question: 'What are the advantages and disadvantages of using Ajax?',
    answer: 'Advantages:<br>Your page will be more pleasant to use, when you can update parts of it without a refresh, which causes the browser to flicker and the statusbar to run. Because you only load the data you need to update the page, instead of refreshing the entire page, you save bandwidth.<br>Disadvantages:<br>Its impossible to use the Back and Forward buttons to navigate between various states of the page. For the same reason, a specific state can\'t be bookmarked by the user. Data loaded through AJAX won\'t be indexed by any of the major search engines. People using browsers without JavaScript support, or with JavaScript disabled, will not be able to use the functionality that you provide through AJAX.',
    sourcetitle: 'Advantage and disadvantage of Ajax',
    sourceurl: 'https://www.mindstick.com/blog/819/advantage-and-disadvantage-of-ajax',
    tag: 'JavaScript',
  },
  {
    num: 27,
    question: 'Explain how JSONP works (and how it\'s not really Ajax).',
    answer: 'JSONP calls are an interesting hack with the <script> tag that allows cross-origin communication. In a JSONP call, the client creates a script tag and puts a URL on it with an callback=xxxx query parameter on it. That script request (via the script tag insertion) is sent by the browser to the foreign server. The browser just thinks it\'s requesting some javascript code. The server then creates some special javascript for the purposes of this call and in that javascript that will get executed by the browser when it\'s returned, the server puts a function call to the function named in the callback=xxxx query parameter. By either defining variables of by passing data to that function, the server can communicate data back to the client. For JSONP, both client and server must cooperate on how the JSONP call works and how the data is defined. A client cannot make a JSONP call to a server that doesn\'t explicitly support JSONP because the exact right type of JSONP response has to be built by the server or it won\'t work.<br>So, the two communication methods work completely differently. Only ajax calls can be synchronous. By the nature of the <script> tag insertion, JSONP calls are always asynchronous.',
    sourcetitle: 'JSONP - Wikipedia',
    sourceurl: 'https://en.wikipedia.org/wiki/JSONP',
    tag: 'JavaScript',
  },
  {
    num: 28,
    question: 'What is JavaScript templating?',
    answer: 'A templating engine is basically a way for developers to interpole strings into more effective ways.<br>Mustache is one of the most widely known templating systems that works for a number of programming languages, including JavaScript, Node.js, PHP, and many others. Because Mustache is a logic-less templating engine, it can be literally used for any kind of development work.<br>Handlebars is a close successor to Mustache, and both can actually be used at the same time, with the ability to swap out tags where necessary. The only difference is that Handlebars is more focused on helping developers to create semantic templates, without having to involve all the confusion and time consumption.<br>doT.js is small, efficient, fast and lightweight templating engine that supports itself (no dependancies), and works great with Node.js and native Browser integration.<br>And others...',
    sourcetitle: 'Top 10 Templating Engines for JavaScript 2016 - Colorlib',
    sourceurl: 'https://colorlib.com/wp/top-templating-engines-for-javascript/',
    tag: 'JavaScript',
  },
  {
    num: 29,
    question: 'Explain "hoisting".',
    answer: 'JavaScript only hoists declarations, not initializations. If you are using a variable that is declared and initialized after using it, the value will be undefined. What does happen is that variable and function declarations are put into memory during the compile phase, but stays exactly where you typed it in your coding.',
    sourcetitle: 'Hoisting - Glossary | MDN',
    sourceurl: 'https://developer.mozilla.org/en-US/docs/Glossary/Hoisting',
    tag: 'JavaScript',
  },
  {
    num: 30,
    question: 'Describe event bubbling.',
    answer: 'Event bubbling occurs when a user interacts with a nested element and the event propagates up (“bubbles”) through all of the ancestor elements. You have to explicitly stop event propagation (bubbling) if you don’t want it.',
    sourcetitle: 'Javascript - Event order',
    sourceurl: 'http://www.quirksmode.org/js/events_order.html',
    tag: 'JavaScript',
  },
  {
    num: 31,
    question: 'What\'s the difference between an "attribute" and a "property"?',
    answer: 'Attributes are defined by HTML. Properties are defined by DOM.',
    sourcetitle: 'Properties and Attributes in HTML - Stack Overflow',
    sourceurl: 'http://stackoverflow.com/questions/6003819/properties-and-attributes-in-html',
    tag: 'JavaScript',
  },
  {
    num: 32,
    question: 'Why is extending built-in JavaScript objects not a good idea?',
    answer: 'When you extend an object, you change its behaviour. Changing the behaviour of an object that will only be used by your own code is fine. But when you change the behaviour of something that is also used by other code there is a risk you will break that other code. If you need custom behaviour, it is far better to define your own class (perhaps a subclass) instead of changing a native one. That way you will not break anything at all.',
    sourcetitle: 'javascript - Why is extending native objects a bad practice? - Stack Overflow',
    sourceurl: 'http://stackoverflow.com/questions/14034180/why-is-extending-native-objects-a-bad-practice',
    tag: 'JavaScript',
  },
  {
    num: 33,
    question: 'What is the difference between == and === ?',
    answer: '=== cares if the objects are the same (strict equals). Therefore, new String("Hello world") === "Hello world" returns false. However, == does not care about if the objects are the same; it just simply converts one argument into the other\'s type: if conversion is not possible, return false. Then new String("Hello world") == "Hello world" returns true instead of false.',
    sourcetitle: 'Which equals operator (== vs ===) should be used in JavaScript comparisons? - Stack Overflow',
    sourceurl: 'http://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons/38856418#38856418',
    tag: 'JavaScript',
  },
  {
    num: 34,
    question: 'Explain the same-origin policy with regards to JavaScript.',
    answer: 'The same-origin policy helps prevent malicious attacks by stopping code from another site executing on your site. An attacks like this is known as a Cross Site Scripting attack.<br>The “origin” is the same if three things are the same: the protocol (http vs. https), the domain (subdomain.yoursite.com vs. yoursite.com vs. google.com), and the port (:80 vs. :4567). If all three of these line up, then JS views the sites as the same, and code is executed. If any of them are different then the code is marked as potentially malicious and is not run.<br>If I own “subdomain.yoursite.com” and “yoursite.com” I might want to share resources. It’s possible to work around the subdomain problem. You can change the domain of a page, so it can access it’s parent’s resources via document.domain.<br>CORS restricts interactions between two different sources.',
    sourcetitle: 'Same-origin policy - Web security | MDN',
    sourceurl: 'https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Changing_origin',
    tag: 'JavaScript',
  },
  {
    num: 35,
    question: 'What is strict mode?',
    answer: 'Strict mode makes several changes to normal JavaScript semantics. First, strict mode eliminates some JavaScript silent errors by changing them to throw errors. Second, strict mode fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that\'s not strict mode. Third, strict mode prohibits some syntax likely to be defined in future versions of ECMAScript.<br>Strict mode prevents: global variables, assigning NaN, throwing errors when trying to delete nondeletable properties, nonunique keys/arguments, no octal syntax, and forbids setting properties on primitive values.',
    sourcetitle: 'Strict mode - JavaScript | MDN',
    sourceurl: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode',
    tag: 'JavaScript',
  },
  {
    num: 36,
    question: 'Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?',
    answer: 'It makes code harder to read and follow when things are in the global scope. Anyone can update a global variable from any point in the program at any time. You may encounter name classes since the global is only one namesapce. Global variables are never garbage collected unless you specifically remove the reference by setting it to null at a later time.',
    sourcetitle: 'Lucy | JS: don’t touch the global scope',
    sourceurl: 'http://lucybain.com/blog/2014/js-dont-touch-global-scope/',
    tag: 'JavaScript',
  },
  {
    num: 37,
    question: 'What language constructions do you use for iterating over object properties and array items?',
    answer: 'For loop: traditional way of iterating over an array<br>For-in: used for objects. If used for arrays it will iterate over both indices and property keys. Properties can be deleted during iteration. Iterates over all object keys, including inherited ones. Use hasOwnProperty to avoid this.<br>forEach: only iterates over an objects own keys (not inherited ones). Does not support break.',
    sourcetitle: 'Iterating over arrays and objects in JavaScript',
    sourceurl: 'http://www.2ality.com/2011/04/iterating-over-arrays-and-objects-in.html',
    tag: 'JavaScript',
  },
  {
    num: 38,
    question: 'Explain the difference between mutable and immutable objects.',
    answer: 'A mutable object can be changed after it\'s created, and an immutable object can\'t. Strings are immutable in JavaScript. Using the const var keyword makes reassigning variables throw an error.',
    sourcetitle: 'Mutable vs Immutable Objects | Interview Cake',
    sourceurl: 'https://www.interviewcake.com/concept/javascript/mutable?',
    tag: 'JavaScript',
  },
  {
    num: 39,
    question: 'Explain the difference between synchronous and asynchronous functions.',
    answer: 'When you execute something synchronously, you wait for it to finish before moving on to another task. When you execute something asynchronously, you can move on to another task before it finishes.',
    sourcetitle: 'Progressive Image Rendering',
    sourceurl: 'https://blog.codinghorror.com/progressive-image-rendering/',
    tag: 'General',
  },
  {
    num: 16,
    question: 'What is progressive rendering?',
    answer: '',
    sourcetitle: 'Progressive Image Rendering',
    sourceurl: 'https://blog.codinghorror.com/progressive-image-rendering/',
    tag: 'General',
  },
  {
    num: 16,
    question: 'What is progressive rendering?',
    answer: '',
    sourcetitle: 'Progressive Image Rendering',
    sourceurl: 'https://blog.codinghorror.com/progressive-image-rendering/',
    tag: 'General',
  },
  {
    num: 16,
    question: 'What is progressive rendering?',
    answer: '',
    sourcetitle: 'Progressive Image Rendering',
    sourceurl: 'https://blog.codinghorror.com/progressive-image-rendering/',
    tag: 'General',
  },
  {
    num: 16,
    question: 'What is progressive rendering?',
    answer: '',
    sourcetitle: 'Progressive Image Rendering',
    sourceurl: 'https://blog.codinghorror.com/progressive-image-rendering/',
    tag: 'General',
  },
];
